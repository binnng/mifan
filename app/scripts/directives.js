// Generated by CoffeeScript 1.7.1

/*
自定义标签
 */
Mifan.directive("more", function() {
  return {
    templateUrl: "views/template/more.html",
    replace: true,
    restrict: "AE"
  };
});

Mifan.directive("snslogin", function() {
  return {
    templateUrl: "views/template/sns-login.html",
    replace: true,
    restrict: "AE"
  };
});

Mifan.directive("usermenu", function() {
  return {
    priority: 0,
    templateUrl: "views/template/usermenu.html",
    replace: true,
    restrict: "E",
    scope: false
  };
});

Mifan.directive("sending-btn", function() {
  return {
    priority: 0,
    templateUrl: "views/template/sending-btn.html",
    transclude: true,
    restrict: "E",
    scope: false
  };
});

Mifan.directive("logintip", function() {
  return {
    templateUrl: "views/template/logintip.html",
    replace: true,
    restrict: "AE",
    scope: false
  };
});

Mifan.directive("errormsg", function() {
  return {
    templateUrl: "views/template/error-msg.html",
    replace: true,
    restrict: "AE",
    scope: false
  };
});

Mifan.directive("uiloading", function() {
  return {
    templateUrl: "views/template/ui-loading.html",
    replace: true,
    restrict: "AE",
    scope: false
  };
});

Mifan.directive("btnloading", function() {
  return {
    template: "<em class=\"glyphicon glyphicon-refresh animated infinite\"></em>",
    replace: true,
    restrict: "AE",
    scope: false
  };
});

// Generated by CoffeeScript 1.7.1
Mifan.directive("expander", function() {
  return {
    restrict: "EA",
    scope: {},
    link: function(scope, element, attrs, ctrl) {
      return element.on("click", function() {});
    }
  };
});

 Mifan.directive('ngBlur', function() {
   return {
     restrict: 'A',
     link: function(scope, element, attrs) {
       angular.element(element).bind('blur', function() {
         scope.$apply(attrs.ngBlur);
       });
     }
   };
 });
// Generated by CoffeeScript 1.7.1
(function(window, angular) {

  /*
  angualr 指令
  轮播器
  支持mobile and pc
   */
  'use strict';
  var DOC, END_EVENT, IsAndroid, IsTouch, MOVE_EVENT, START_EVENT, UA, UNDEFINED, WIN, ngScorller;
  DOC = document;
  WIN = window;
  UNDEFINED = void 0;
  IsTouch = 'ontouchstart' in WIN;
  UA = WIN.navigator.userAgent;
  IsAndroid = /Android|HTC/i.test(UA) || !!(WIN.navigator["platform"] + "").match(/Linux/i);
  START_EVENT = IsTouch ? 'touchstart' : 'mousedown';
  MOVE_EVENT = IsTouch ? 'touchmove' : 'mousemove';
  END_EVENT = IsTouch ? 'touchend' : 'mouseup';
  return ngScorller = angular.module("binnng.scroller", []);
})(window, angular);

// Generated by CoffeeScript 1.7.1
Mifan.directive("subNav", function() {
  return {
    templateUrl: "views/template/sub-nav.html",
    replace: false,
    transclude: true,
    restrict: "AE",
    scope: false
  };
});

// Generated by CoffeeScript 1.7.1
(function(window, angular) {

  /*
  angualr 指令
  手指轻碰一下就会触发事件
   */
  'use strict';
  var IsTouch, LOC, NA, UA, WIN, tap;
  tap = angular.module('binnng.tap', []);
  WIN = window;
  IsTouch = "ontouchend" in WIN;
  if (!IsTouch) {
    return false;
  }
  LOC = location;
  NA = WIN.navigator;
  UA = NA.userAgent;
  return tap.directive("tap", function() {
    return {
      link: function(scope, element, attrs) {
        var fn, fnName;
        fnName = attrs["tap"].replace("()", "");
        fn = scope[fnName];
        if (!fn) {
          return false;
        }
        return element.on("touchstart", function(event) {
          fn();
          return event.stopPropagation();
        });
      }
    };
  });
})(window, angular);

// Generated by CoffeeScript 1.7.1
(function(window, angular) {

  /*
  angualr 指令
  目的是链接跳转采用touch事件模拟，跳转行为响应更快
   */
  'use strict';
  var IsAndroid, IsTouch, LOC, MOVE_BUFFER_RADIUS, NA, UA, WIN, getCoordinates, ngTouchHref;
  ngTouchHref = angular.module('binnng.touch.href', []);
  WIN = window;
  IsTouch = "ontouchend" in WIN;
  if (!IsTouch) {
    return false;
  }
  LOC = location;
  NA = WIN.navigator;
  UA = NA.userAgent;
  IsAndroid = /Android|HTC/i.test(UA) || /Linux/i.test(NA.platform + "");
  MOVE_BUFFER_RADIUS = IsAndroid ? 10 : 6;
  getCoordinates = function(event) {
    var e, touches;
    touches = event.touches && (event.touches.length ? event.touches : [event]);
    e = (event.changedTouches && event.changedTouches[0]) || (event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0]) || touches[0].originalEvent || touches[0];
    return {
      x: e.clientX,
      y: e.clientY
    };
  };
  return ngTouchHref.directive("ngHref", function() {
    return {
      link: function(scope, element, attrs) {
        var active, lastPos, onTouchCancel, onTouchEnd, onTouchMove, onTouchStart, startCoords, totalX, totalY, _ref;
        if (((_ref = element[0]) != null ? _ref.tagName.toUpperCase() : void 0) === "A") {
          totalX = totalY = 0;
          startCoords = lastPos = null;
          active = false;
          onTouchStart = function(event) {
            startCoords = getCoordinates(event);
            active = true;
            return lastPos = startCoords;
          };
          onTouchCancel = function(event) {
            return active = false;
          };
          onTouchMove = function(event) {
            var coords;
            if (!active && !startCoords) {
              return false;
            }
            coords = getCoordinates(event);
            totalX += Math.abs(coords.x - lastPos.x);
            totalY += Math.abs(coords.y - lastPos.y);
            lastPos = coords;
            if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
              return false;
            }
            if (totalY > totalX) {
              return active = false;
            } else {
              return event.preventDefault();
            }
          };
          onTouchEnd = function(event) {
            if (!active) {
              return false;
            }
            active = false;
            if (typeof event.preventDefault === "function") {
              event.preventDefault();
            }
            if (typeof event.stopPropagation === "function") {
              event.stopPropagation();
            }
            return LOC["href"] = attrs.ngHref;
          };
          element.on("touchstart", onTouchStart);
          element.on("touchcancel", onTouchCancel);
          element.on("touchmove", onTouchMove);
          return element.on("touchend", onTouchEnd);
        }
      }
    };
  });
})(window, angular);
