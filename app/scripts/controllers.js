// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("404Ctrl", function($scope) {
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "404");
  });
  return false;
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("aboutCtrl", function($scope, $http) {
  var about;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "about");
  });
  about = {
    init: function() {
      return about.getAbout();
    },
    getAbout: function() {
      var api;
      api = "" + API.aboutsite + $scope.privacyParamDir + "?infokey=about";
      if (IsDebug) {
        api = API.aboutsite;
      }
      return $http.get(api, {
        cache: true
      }).success(about.getAboutCb);
    },
    getAboutCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      return $scope.site = result;
    }
  };
  about.init();
  return false;
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("friendCtrl", function($scope, $routeParams, $location) {
  var friend, isFansPage, myself, setFollowBtn, switchFeed, userid;
  userid = $routeParams.id || null;
  $scope.myself = myself = !userid ? true : $scope.UID === userid;
  isFansPage = $location.$$url.indexOf("fans") > -1;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "friend");
  });
  $scope.feedType = isFansPage ? "fans" : "follow";
  $scope.switchFeed = switchFeed = function(type) {
    if (type == null) {
      type = "follow";
    }
    if (type === friend.curType) {
      return false;
    }
    $scope.feedType = type;
    $scope.isLoading = false;
    $scope.dataLoaded = false;
    $scope.dataLists = null;
    $scope.$emit("onClearPaginationData");
    friend.curType = type;
    switch (type) {
      case "follow":
        friend.getFollow(1);
        return $scope.getPage = friend.getFollow;
      default:
        friend.getFans(1);
        return $scope.getPage = friend.getFans;
    }
  };
  setFollowBtn = function(iffollow) {
    var followBtn;
    iffollow = iffollow || 0;
    followBtn = {};
    switch (iffollow - 0) {
      case 0:
        followBtn = {
          txt: "",
          cls: "success"
        };
        break;
      case 1:
        followBtn = {
          txt: "取消",
          cls: "warning"
        };
        break;
      case 2:
        followBtn = {
          txt: "互相",
          cls: "warning"
        };
    }
    followBtn.txt += "关注";
    return followBtn;
  };
  $scope.ta = myself ? "我" : "TA";
  friend = {
    init: function() {
      $scope.$on("onGetUserFollowsCb", function(e, data) {
        return friend.getFollowCb(data);
      });
      $scope.$on("onGetUserFansCb", function(e, data) {
        return friend.getFansCb(data);
      });
      switchFeed($scope.feedType);
      return $scope.theuser = userid;
    },
    getFollow: function(page) {
      var uid;
      if (page == null) {
        page = 1;
      }
      $scope.$emit("onPaginationStartChange", page);
      uid = myself ? $scope.UID : userid;
      return $scope.$emit("onGetUserFollows", {
        page: page,
        uid: uid
      });
    },
    getFollowCb: function(data) {
      var dataLists, msg, pageData, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      if (result && result.page) {
        dataLists = result["list"];
        $scope.dataLists = dataLists;
        pageData = result["page"];
        if (pageData) {
          $scope.$emit("onPaginationGeted", pageData);
        }
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    },
    getFans: function(page) {
      var uid;
      if (page == null) {
        page = 1;
      }
      $scope.$emit("onPaginationStartChange", page);
      uid = myself ? $scope.UID : userid;
      return $scope.$emit("onGetUserFans", {
        page: page,
        uid: uid
      });
    },
    getFansCb: function(data) {
      var dataLists, msg, pageData, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      if (result && result.page) {
        dataLists = result["list"];
        $scope.dataLists = dataLists;
        pageData = result["page"];
        if (pageData) {
          $scope.$emit("onPaginationGeted", pageData);
        }
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    }
  };
  return friend.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("globalCtrl", function($scope) {
  $scope.WIN = WIN;
  $scope.DOC = DOC;
  $scope.LOC = LOC;
  $scope.BODY = BODY;
  $scope.API = API;
  $scope.IsIPhone = IsIPhone;
  $scope.IsIPad = IsIPad;
  $scope.IsIOS = IsIOS;
  $scope.IsAndroid = IsAndroid;
  $scope.IsAndroidPad = IsAndroidPad;
  $scope.IsIEMobile = IsIEMobile;
  $scope.IsWeixin = IsWeixin;
  $scope.IsTouch = $scope.IsMobile = IsTouch;
  $scope.IsChrome = IsChrome;
  $scope.IsIE = IsIE;
  $scope.IsPhone = IsPhone;
  $scope.IsWebapp = IsWebapp;
  return $scope.DEFAULT_FACE = DEFAULT_FACE;
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("headCtrl", function($scope) {
  $scope.dropdownOpen = false;
  $scope.toggleDropdown = function() {
    return $scope.dropdownOpen = !$scope.dropdownOpen;
  };
  $scope.support = function() {
    return alert(1);
  };
  $scope.navs = [
    {
      page: "home",
      text: "首页"
    }, {
      page: "msg",
      text: "消息"
    }, {
      page: "me",
      text: "个人主页"
    }, {
      page: "friend",
      text: "朋友"
    }, {
      page: "square",
      text: "广场"
    }
  ];
  $scope.remind = "米饭新增豆瓣登录!";
  return $scope.remind = "";
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("addCommentCtrl", function($scope, $http) {
  var comment;
  comment = {
    init: function() {
      $scope.comment = comment.send;
      $scope.$on("commentCb", function(e, data) {
        return comment.sendCb(data);
      });
      $scope.$on("getcommentCb", function(e, data) {
        return comment.getCb(data);
      });
      $scope.expandCmtFn = comment.expand;
      $scope.expandReplyFn = comment.replyExpand;
      return $scope.reply = comment.reply;
    },
    point: null,
    feed: null,
    getcommentFeed: null,
    content: "",
    send: function(news, point, isReply) {
      var content;
      point.isSendingCmt = true;
      content = isReply ? "回复@" + comment.replyUsername + ": " + point.rplContent : point.cmtContent;
      comment.content = content;
      $scope.$emit("comment", {
        askid: news.ask.askid,
        answerid: news.answer.answerid,
        content: content
      });
      comment.point = point;
      return comment.feed = news;
    },
    sendCb: function(data) {
      var cmt, msg, result, ret, toastType, user, _ref, _ref1, _ref2;
      ret = data.ret, msg = data.msg, result = data.result;
      toastType = "";
      if (String(ret) !== "100000") {
        toastType = "warn";
      }
      $scope.toast(msg);
      if (comment.point) {
        comment.point.isSendingCmt = false;
        comment.point.isSendingRpl = false;
        comment.point.cmtContent = "";
        comment.point.rplContent = "";
        comment.point.expandReply = false;
      }
      user = $scope.user;
      cmt = {
        content: comment.content,
        addtime: +(new Date),
        user: {
          "userid": user.userid,
          "username": user.username,
          "email": user.email,
          "face": user.email,
          "path": user.path,
          "face_120": user.face_120,
          "face_60": user.face_60
        }
      };
      if ((_ref = comment.feed) != null) {
        _ref.commentList.splice(0, 0, cmt);
      }
      return (_ref1 = comment.feed) != null ? _ref1.answer.comment_count = ((_ref2 = comment.feed) != null ? _ref2.answer.comment_count : void 0) - 0 + 1 : void 0;
    },
    expand: function(feed, point) {
      point.expandCmt = !point.expandCmt;
      if (point.expandCmt) {
        comment.get(feed, point);
        return comment.getcommentFeed = feed;
      }
    },
    get: function(feed, point) {
      var data;
      data = {
        answerid: feed.answer.answerid
      };
      return $scope.$emit("getcomment", data);
    },
    getCb: function(data) {
      var msg, result, ret, _ref;
      ret = data.ret, msg = data.msg, result = data.result;
      return (_ref = comment.getcommentFeed) != null ? _ref.commentList = result || [] : void 0;
    },
    replyExpand: function(feed, point) {
      return point.expandReply = !point.expandReply;
    },
    replyUsername: "",
    reply: function(index, feed, point) {
      var cmt, username;
      cmt = feed.commentList[index];
      username = cmt.user.username;
      comment.replyUsername = username;
      point.isSendingRpl = true;
      return comment.send(feed, point, true);
    },
    replyCb: function(data) {}
  };
  return comment.init();
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("addLoveCtrl", function($scope, $http) {
  var loveAns;
  loveAns = {
    init: function() {
      $scope.loveAns = loveAns.send;
      return $scope.$on("loveansCb", function(event, data) {
        return loveAns.sendCb(data);
      });
    },
    feed: null,
    send: function(item, point) {
      var data;
      if (item.love.iflove) {
        return false;
      }
      data = {
        answerid: item.answer.answerid
      };
      loveAns.feed = item;
      return $scope.$emit("loveans", data);
    },
    sendCb: function(data) {
      var msg, result, ret, toastType;
      ret = data.ret, msg = data.msg, result = data.result;
      toastType = "";
      if (String(ret) === "100000") {
        if (loveAns.feed) {
          loveAns.feed.love.iflove = 1;
          loveAns.feed.answer.digg = result;
        }
        msg = "喜欢成功";
      } else {
        toastType = "warn";
      }
      return $scope.toast(msg, toastType);
    }
  };
  return loveAns.init();
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("homeAnswer", function($scope, $http) {
  var news;
  $scope.$emit("clearAnswerRemind");
  $scope.ansMeCollect = [];
  news = {
    init: function() {
      news.get();
      return $scope.getPage = news.get;
    },
    get: function(page) {
      var cb, url;
      if (page == null) {
        page = 1;
      }
      url = "" + API.answerme + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        url = API.answerme;
      }
      $scope.$emit("onPaginationStartChange", page);
      cb = function(data) {
        var result, ret;
        ret = data.ret, result = data.result;
        if (result) {
          $scope.ansMeCollect = result['list'];
          $scope.$emit("onPaginationGeted", result['page']);
        } else {
          $scope.errorMsg = data.msg;
        }
        return $scope.dataLoaded = true;
      };
      return $http.get(url).success(cb);
    }
  };
  return news.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("homeAskCtrl", function($scope, $timeout) {
  var clearAsk;
  $scope.quesContent = "";
  $scope.isSending = false;
  $scope.send = function() {
    $scope.isSending = true;
    return $scope.askQues({
      content: $scope.quesContent
    });
  };
  clearAsk = function() {
    $scope.isSending = false;
    return $timeout(function() {
      return $scope.isSendSucs = false;
    }, 1000);
  };
  $scope.$on("onAskQuesSuccess", function(event, msg) {
    $scope.quesContent = "";
    $scope.isSendSucs = true;
    $scope.toast("提问成功！");
    return clearAsk();
  });
  return $scope.$on("onAskQuesFail", function(event, msg) {
    $scope.toast(msg.msg, "warn");
    return clearAsk();
  });
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("homeCoverCtrl", function($scope, $timeout) {
  return $scope.bgUrl = "images/covers/fruit_large.jpg";
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("homeCtrl", [
  "$scope", "$routeParams", function($scope, $routeParams) {
    var legalFeedTypes, setCaretLeft;
    legalFeedTypes = ["news", "answer", "reply", "love"];
    setCaretLeft = function(type) {
      var index;
      index = legalFeedTypes.indexOf(type);
      return $scope.caretLeft = "" + (index * 25) + "%";
    };
    $scope.legalFeedTypes = legalFeedTypes;
    $scope.caretLeft = "0";
    if (0 > legalFeedTypes.indexOf($routeParams.type)) {
      $routeParams.type = "news";
    }
    $scope.feedType = $routeParams.type;
    $scope.$on("$viewContentLoaded", function() {
      return $scope.$emit("pageChange", "home");
    });
    $scope.remind = {
      newsNum: 0,
      answerNum: 2,
      replyNum: '...',
      loveNum: 0
    };
    $scope.$on("clearAnswerRemind", function() {
      return $scope.remind.answerNum = 0;
    });
    $scope.$on("clearReplyRemind", function() {
      return $scope.remind.replyNum = 0;
    });
    $scope.loadingMore = function() {
      return $scope.isLoading = true;
    };
    $scope.switchFeed = function(type) {
      type = type || "news";
      $scope.feedType = type;
      $scope.isLoading = false;
      $scope.dataLoaded = false;
      setCaretLeft(type);
      return $scope.$emit("onClearPaginationData");
    };
    return false;
  }
]);

// Generated by CoffeeScript 1.7.1
Mifan.controller("homeFeed", function($scope, $http) {
  var feed;
  feed = {
    init: function() {}
  };
  feed.init();
  $scope.toggleMBubble = function(index) {
    return $scope.newsCollect[index].bblActv = !$scope.newsCollect[index].bblActv;
  };
  return $scope.setMBill = function(index) {
    return $scope.toggleMBill(["love", "comment", "share"]);
  };
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("homeLove", function($scope, $http) {
  var API, news;
  $scope.$emit("clearLoveRemind");
  API = $scope.API;
  $scope.content = "";
  $scope.newsCollect = [];
  news = {
    init: function() {
      $scope.getPage = news.get;
      return news.get(1);
    },
    get: function(page) {
      var cb, url;
      if ($scope.isPageLoading) {
        return false;
      }
      url = "" + API.lovemefeed + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        url = API.lovemefeed;
      }
      $scope.$emit("onPaginationStartChange", page);
      cb = function(data) {
        var msg, newsCollect, pageData, result, ret, _i, _len;
        ret = data.ret, result = data.result, msg = data.msg;
        if (result && result.page) {
          newsCollect = result['list'];
          for (_i = 0, _len = newsCollect.length; _i < _len; _i++) {
            news = newsCollect[_i];
            news.feedMod = "loveme";
          }
          $scope.newsCollect = newsCollect;
          pageData = result['page'];
          if (pageData) {
            $scope.$emit("onPaginationGeted", pageData);
          }
        } else {
          $scope.errorMsg = msg;
        }
        return $scope.dataLoaded = true;
      };
      return $http.get(url).success(cb);
    }
  };
  return news.init();
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("homeNews", function($scope, $timeout, $http, $time) {
  var API, news;
  API = $scope.API;
  $scope.content = "";
  $scope.newsCollect = [];
  news = {
    init: function() {
      var getFirstPage;
      getFirstPage = function() {
        return news.get(1);
      };
      $scope.$on("getHomeNews", getFirstPage);
      if ($scope.isLogin) {
        getFirstPage();
      }
      return $scope.getPage = news.get;
    },
    get: function(page) {
      var cb, url;
      if ($scope.isPageLoading) {
        return false;
      }
      url = "" + API.news + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        url = API.news;
      }
      $scope.$emit("onPaginationStartChange", page);
      cb = function(data) {
        var msg, result, ret;
        ret = data.ret, result = data.result, msg = data.msg;
        if (result && result.page) {
          $scope.newsCollect = result['list'];
          $scope.$emit("onPaginationGeted", result['page']);
        } else {
          $scope.errorMsg = msg;
        }
        return $scope.dataLoaded = true;
      };
      return $http.get(url).success(cb);
    }
  };
  return news.init();
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("homeReply", function($scope, $http) {
  var API, news;
  $scope.$emit("clearReplyRemind");
  API = $scope.API;
  $scope.content = "";
  $scope.newsCollect = [];
  news = {
    init: function() {
      $scope.getPage = news.get;
      return news.get(1);
    },
    get: function(page) {
      var cb, url;
      if ($scope.isPageLoading) {
        return false;
      }
      url = "" + API.commentme + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        url = API.commentme;
      }
      $scope.$emit("onPaginationStartChange", page);
      cb = function(data) {
        var newsCollect, pageData, result, ret, _i, _len;
        ret = data.ret, result = data.result;
        if (result && result.page) {
          newsCollect = result['list'];
          for (_i = 0, _len = newsCollect.length; _i < _len; _i++) {
            news = newsCollect[_i];
            news.feedMod = "replyme";
            news["commentList"] = [news.comment];
          }
          $scope.newsCollect = newsCollect;
          pageData = result['page'];
          if (pageData) {
            $scope.$emit("onPaginationGeted", pageData);
          }
        } else {
          $scope.errorMsg = data.msg;
        }
        return $scope.dataLoaded = true;
      };
      return $http.get(url).success(cb);
    }
  };
  return news.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("homeSideCtrl", function($scope) {
  return $scope.mifanAskContent = "情人节和谁过的？";
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("loginCtrl", function($scope, $http, $timeout, $location) {
  var API, SNS, userLogin, userLoginErrorCb, userLoginSuccessCb;
  API = $scope.API;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "login");
  });
  $scope.error = null;
  userLoginSuccessCb = function(data, status) {

    /*
    {
      "msg": "密码错误！",
      "ret": "104003"
    }
    
    {
      "msg": "Email不存在，你可能还没有注册！",
      "ret": "104002"
    }
    
    {
      "msg": "OK",
      "ret": "100000",
      "result": {}
    }
     */
    var result, ret;
    ret = data["ret"];
    if (ret === "100000") {
      result = data["result"];
      $scope.$emit("onLogined", result);
    } else if (ret === "104003") {
      $scope.error = {
        type: "password",
        msg: "密码错误 :("
      };
    } else if (ret === "104002") {
      $scope.error = {
        type: "username",
        msg: "用户名不存在 T_T"
      };
    }
    if ($scope.error) {
      $timeout(function() {
        return $scope.error = null;
      }, 3000);
    }
    return $scope.isLoging = false;
  };
  userLoginErrorCb = function(data, status) {
    var ret;
    ret = data["ret"];
    return $scope.isLoging = false;
  };
  userLogin = function() {
    $scope.isLoging = true;
    return $http({
      method: IsDebug ? "GET" : "POST",
      url: API.user,
      data: {
        user_email: $scope.email,
        user_password: $scope.password
      }
    }).success(userLoginSuccessCb).error(userLoginErrorCb);
  };
  $scope.$watch("email + password", function() {
    return $scope.isLogValid = $scope.email && $scope.password;
  });
  $scope.isLoging = false;
  $scope.onSubmit = function() {
    if ($scope.email && $scope.password) {
      return userLogin();
    }
  };
  SNS = {
    init: function() {
      $scope.loginweibo = SNS.weibo;
      if (SNS.getWeiboLoginCode()) {
        return SNS.weiboLoginSuccess();
      }
    },
    weibo: function() {
      var api;
      if ($scope.isWeiboLoging) {
        return false;
      }
      $scope.isWeiboLoging = true;
      api = "" + API.weiboLogin;
      if (IsDebug) {
        api = API.weiboLogin;
      }
      return $http.get(api).success(SNS.weiboCb);
    },
    weiboCb: function(data) {
      var msg, result, ret;
      $scope.isWeiboLoging = false;
      ret = data.ret, msg = data.msg, result = data.result;
      return LOC["href"] = result;
    },
    getWeiboLoginCode: function() {
      var code, _ref;
      code = (_ref = $location.$$search) != null ? _ref["code"] : void 0;
      SNS.weiboLoginCode = code;
      return code;
    },
    weiboLoginSuccess: function() {
      var api;
      api = IsDebug ? API.weiboLoginCb : "" + API.weiboLoginCb + "?code=" + SNS.weiboLoginCode;
      $http.get(api).success(SNS.weiboLoginSuccessCb);
      return $scope.isWeiboLoging = true;
    },
    weiboLoginSuccessCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      $scope.isWeiboLoging = false;
      $location.$$search = null;
      if (result) {
        return $scope.$emit("onLogined", result);
      } else {
        return $scope.toast(msg, "warn");
      }
    }
  };
  return SNS.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("meCtrl", function($scope, $timeout, $http) {
  var legalFeedTypes, me;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "me");
  });
  legalFeedTypes = ["ask", "answer", "love"];
  $scope.feedType = "ask";
  $scope.ta = "我";
  $scope.loadingMore = function() {
    return $scope.isLoading = true;
  };
  $scope.switchFeed = function(type) {
    type = type || "ask";
    if (type === me.curType) {
      return false;
    }
    $scope.feedType = type;
    $scope.isLoading = false;
    $scope.dataLoaded = false;
    $scope.$emit("onClearPaginationData");
    me.curType = type;
    switch (type) {
      case "answer":
        me.getMyAnswer(1);
        return $scope.getPage = me.getMyAnswer;
      case "love":
        me.getMyLove(1);
        return $scope.getPage = me.getMyLove;
      default:
        me.getMyAsk(1);
        return $scope.getPage = me.getMyAsk;
    }
  };
  $scope.profile = $scope.user;
  me = {
    init: function() {
      $scope.myAsk = $scope.myAnswer = $scope.myLove = [];
      $scope.myAskMore = $scope.myAnswerMore = $scope.myLoveMore = false;
      $scope.myself = true;
      return $scope.switchFeed("");
    },
    feedWatcher: function(feed) {
      if (feed == null) {
        feed = "ask";
      }
    },
    curType: "",
    getMyAsk: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.myask + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        api = API.myask;
      }
      $http.get(api).success(me.getMyAskCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getMyAskCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      if (msg === "ok") {
        $scope.myAsk = result['list'] || [];
        $scope.$emit("onPaginationGeted", result['page']);
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    },
    getMyAnswer: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.myanswer + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        api = API.myanswer;
      }
      $http.get(api).success(me.getMyAnswerCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getMyAnswerCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      if (msg === "ok") {
        $scope.myAnswer = result['list'] || [];
        $scope.$emit("onPaginationGeted", result['page']);
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    },
    getMyLove: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.mylove + $scope.privacyParamDir + "/page/" + page;
      if (IsDebug) {
        api = API.mylove;
      }
      $http.get(api).success(me.getMyLoveCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getMyLoveCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      if (msg === "ok") {
        $scope.myLove = result['list'] || [];
        $scope.$emit("onPaginationGeted", result['page']);
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    }
  };
  return me.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("profileCtrl", function($scope) {});

// Generated by CoffeeScript 1.7.1
Mifan.controller("mBillCtrl", function($scope) {
  var billListMap;
  billListMap = {
    "love": {
      name: "喜欢"
    },
    "comment": {
      name: "评论",
      fn: "toggleMDesign('comment')"
    },
    "share": {
      name: "分享"
    },
    "answer": {
      name: "回答",
      fn: "toggleMDesign('answer')"
    }
  };
  $scope.billList = [];
  return $scope.$on("setBillList", function(event, msg) {
    var type;
    return $scope.billList = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = msg.length; _i < _len; _i++) {
        type = msg[_i];
        _results.push(billListMap[type]);
      }
      return _results;
    })();
  });
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("mDesginCtrl", function($scope, $timeout) {
  var DOC, elMDesignTextarea, sendData, titleMap;
  DOC = $scope.DOC;
  elMDesignTextarea = DOC["getElementById"]("m-design-input");
  titleMap = {
    "ask": "提出问题",
    "comment": "评论",
    "answer": "回答"
  };
  $scope.mDesignContent = "";
  sendData = {};
  $scope.$on("setMDesignType", function(evet, msg) {
    $scope.viewType = msg;
    $scope.title = titleMap[msg];
    switch (msg) {
      case "ask":
        sendData = {
          type: msg,
          content: $scope.mDesignContent
        };
    }
    return $timeout(function() {
      return elMDesignTextarea.focus();
    }, 800);
  });
  $scope.$on("cancelMDesingSending", function() {
    $scope.isSending = false;
    return $scope.mDesignContent = "";
  });
  $scope.onSubmit = function() {
    $scope.isSending = true;
    return $scope.$emit("onMDesignSend", sendData);
  };
  return $scope.$on("onMDesignSendSuccess", function(event, msg) {
    $scope.mDesignContent = "";
    $scope.isSending = false;
    $scope.isSendSucs = true;
    return $timeout(function() {
      $scope.isSendSucs = false;
      if ($scope.isMDesignOpen) {
        return $scope.toggleMDesign();
      }
    }, 800);
  });
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("mMenuCtrl", function($scope, $timeout) {});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("msgCtrl", function($scope, $rootScope, $http, $debug, $timeout) {
  var DOC, ans, message;
  DOC = $scope.DOC;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "msg");
  });
  $scope.setMBill = function(index) {
    return $scope.toggleMBill(["love", "answer", "share"]);
  };
  message = {
    init: function() {
      message.getAskMe();
      $scope.askMe = [];
      $scope.askMeMsg = "";
      $scope.askMeMore = false;
      return $scope.getPage = message.getAskMe;
    },
    getAskMe: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      if ($scope.isPageLoading) {
        return false;
      }
      api = "" + API.askme + $scope.privacyParamDir + "/type/askme/page/" + page;
      if (IsDebug) {
        api = API.askme;
      }
      $http.get(api).success(message.getAskMeCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getAskMeCb: function(data) {
      var list, msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      if (msg === "ok") {
        list = result != null ? result['list'] : void 0;
        $scope.askMe = list || [];
        message.count = list.length;
        $scope.$emit("onPaginationGeted", result['page']);
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    },
    count: 0
  };
  message.init();
  ans = {
    init: function() {
      $scope.sendAns = ans.send;
      $scope.$watch($scope.askMe, function() {
        if ($scope.askMe.length === 0) {
          return $scope.askMeMsg = "空";
        }
      });
      return $scope.$on("ansCb", function(event, data) {
        return ans.sendCb(data);
      });
    },
    item: null,
    send: function(item, data) {
      var query;
      item.isSending = true;
      ans.item = item;
      query = {
        askid: data.askid,
        content: item.content
      };
      return $scope.$emit("ans", query);
    },
    sendCb: function(data) {
      var item, toastType;
      item = ans.item;
      item.content = "";
      item.isSending = false;
      toastType = "";
      if (String(data.ret) === "100000") {
        $timeout(((function(_this) {
          return function() {
            item.isSendSucs = true;
            item.answerd = true;
            item.isSendSucs = false;
            ans.count++;
            if (ans.count >= message.count) {
              return $scope.askMe.length = 0;
            }
          };
        })(this)), 100);
      } else {
        toastType = "warn";
      }
      return $scope.toast(data.msg, toastType);
    },
    count: 0
  };
  ans.init();
  return false;
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("quesDetailCtrl", function($scope, $timeout, $http, $routeParams, $location) {
  var askid, ques;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "ques");
  });
  askid = $routeParams.id;
  ques = {
    init: function() {
      ques.getInfo(askid);
      ques.getAns(1);
      $scope.$on("onGetAskInfoCb", function(e, data) {
        return ques.getInfoCb(data);
      });
      $scope.$on("onGetAskAnswersCb", function(e, data) {
        return ques.getAnsCb(data);
      });
      return $scope.getPage = ques.getAns;
    },
    getInfo: function(askid) {
      return $scope.$emit("onGetAskInfo", askid);
    },
    getInfoCb: function(data) {
      var result, ret;
      ret = data.ret, result = data.result;
      if (String(ret) === "100000") {
        $scope.askInfo = result;
      }
      return $scope.dataInfoLoaded = true;
    },
    getAns: function(page) {
      if (page == null) {
        page = 1;
      }
      $scope.$emit("onGetAskAnswers", {
        askid: askid,
        page: page
      });
      return $scope.$emit("onPaginationStartChange", page);
    },
    getAnsCb: function(data) {
      var ans, askAns, result, ret, _i, _len;
      ret = data.ret, result = data.result;
      if (String(ret) === "100000") {
        askAns = result["list"];
        for (_i = 0, _len = askAns.length; _i < _len; _i++) {
          ans = askAns[_i];
          ans.ask = {
            askid: askid
          };
        }
        $scope.askAns = askAns;
        $scope.$emit("onPaginationGeted", result["page"]);
      }
      return $scope.dataLoaded = true;
    }
  };
  return ques.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("registerCtrl", function($scope) {
  var reg, rules, toast, validEmail, validInviteCode, validName, validPwd;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "register");
  });
  toast = function(msg, type, time) {
    if (time == null) {
      time = 5000;
    }
    return $scope.toast(msg, type, time);
  };
  rules = {
    email: {
      reg: /^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/,
      tip: "邮箱格式错误"
    },
    pwd: {
      reg: /^[\w\~\!\@\#\$\%\^\&\*\(\)\+\`\-\=\[\]\\\{\}\|\;\'\:\"\,\.\/\<\>\?0-9a-zA-z]{6,20}$/,
      tip: "密码应该由6-40个英文字母、数字或符号组成"
    }
  };
  validEmail = function(email) {
    return rules.email.reg.test(email);
  };
  validPwd = function(pwd) {
    return pwd && rules.pwd.reg.test(pwd);
  };
  validName = function(name) {
    return !!name;
  };
  validInviteCode = function(code) {
    return !!code;
  };
  reg = {
    init: function() {
      $scope.$watch("email + password + username + invitecode", function() {
        return $scope.isRegValid = reg.valid();
      });
      $scope.isReging = false;
      $scope.onSubmit = reg.onSubmit;
      $scope.valid = reg.valid;
      return $scope.$on("onRegCb", function(event, data) {
        return reg.onSubmitCb(data);
      });
    },
    valid: function(needToast) {
      var base, email, flag, invitecode, isCodeOk, isEmailOk, isNameOk, isPwdOk, password, username;
      email = $scope.email, password = $scope.password, username = $scope.username, invitecode = $scope.invitecode;
      flag = false;
      base = !!(email && password && username && invitecode);
      isEmailOk = email && validEmail(email);
      isNameOk = username && validName(username);
      isPwdOk = password && validPwd(password);
      isCodeOk = invitecode && validInviteCode(invitecode);
      if (isEmailOk && isNameOk && isPwdOk && isCodeOk) {
        flag = true;
      } else {
        flag = false;
        if (needToast) {
          if (!isEmailOk) {
            if (email) {
              toast(rules.email.tip, "error");
            }
          }
          if (!isPwdOk) {
            if (password) {
              toast(rules.pwd.tip, "error");
            }
          }
        }
      }
      return flag;
    },
    onSubmit: function() {
      var email, invitecode, password, username;
      $scope.isReging = true;
      email = $scope.email, password = $scope.password, username = $scope.username, invitecode = $scope.invitecode;
      return $scope.$emit("onReg", {
        email: email,
        password: password,
        username: username,
        invitecode: invitecode
      });
    },
    onSubmitCb: function(data) {
      var isSuccess, msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      isSuccess = false;
      $scope.isReging = false;
      if (String(ret) === "100000") {
        $scope.$emit("onRegSuccess", result);
        return toast("注册成功！", "success");
      } else {
        if (msg) {
          return toast(msg, "error");
        }
      }
    }
  };
  return reg.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("rootCtrl", function($scope, $cookieStore, $http, $timeout, $storage, $cacheFactory, $extend, $location, $debug) {
  var API, Ans, Ask, Cache, Comment, Follow, Friend, LoveAns, MBill, MDesign, MMenu, Notification, Page, Pagination, Ques, Reg, Toast, User, elMwrap, getUserInfo, store;
  API = $scope.API;
  $storage.put = $storage.set;
  store = IsWebapp ? $storage : $cookieStore;
  $scope.supportNum = "1万";

  /*
  用户信息，用户操作的方法
   */
  User = {
    init: function() {
      $scope.user = {};
      $scope.accessToken = $scope.UID = $scope.username = void 0;
      $scope.isLogin = false;
      $scope.$on("onLogined", User.onLoginCb);
      $scope.User = User;
      return User.getLocal();
    },
    set: function(user) {
      return $extend($scope.user, user);
    },
    getRemote: function() {
      var uid, url;
      uid = $scope.user.uid;
      url = ["" + API.userInfo, (IsDebug ? "" : "/" + uid), "" + $scope.privacyParam, "&uid=" + uid].join("");
      return $http.get(url).success(User.getRemoteCb).error(User.getRemoteErrorCb);
    },
    getRemoteCb: function(data) {
      var ret, user;
      ret = data["ret"];
      if (String(ret) === "100000") {
        user = data["result"];
        User.set(user);
        $scope.isLogin = true;
        return $scope.$broadcast("getHomeNews");
      } else {
        return User.onOutOfDate();
      }
    },
    getRemoteErrorCb: function(data) {},
    isLocalLogin: false,
    getLocal: function() {
      var accessToken, uid;
      uid = store.get("mUID");
      accessToken = store.get("mAccessToken");
      if (uid && accessToken) {
        return User.getLocalCb(uid, accessToken);
      } else {
        if (!LOC["href"].match(/register/)) {
          return User.login();
        }
      }
    },
    getLocalCb: function(uid, accessToken) {
      var username;
      User.isLocalLogin = true;
      username = store.get("mUsername");
      $scope.user.uid = $scope.UID = uid;
      $scope.user.face_60 = $scope.user.face_120 = $scope.DEFAULT_FACE;
      $scope.user.username = $scope.username = username;
      $scope.accessToken = accessToken;
      User.setPrivacy();
      return User.getRemote();
    },
    setPrivacy: function() {
      var accessToken, uid;
      accessToken = $scope.accessToken;
      uid = $scope.UID;
      $scope.privacyParam = "?access_token=" + accessToken + "&userid=" + uid;
      return $scope.privacyParamDir = "/access_token/" + accessToken + "/userid/" + uid;
    },
    store: function(user) {
      store.put("mUID", user["userid"]);
      store.put("mUsername", user["username"]);
      return store.put("mAccessToken", $scope.accessToken);
    },
    remove: function() {
      store.remove("mUID");
      store.remove("mUsername");
      return store.remove("mAccessToken");
    },
    onLoginCb: function(event, result) {
      var accessToken, user;
      $scope.isLogin = true;
      accessToken = $scope.accessToken = result["accesstoken"];
      user = result["user"];
      $scope.username = user["username"];
      $scope.UID = user["userid"];
      $scope.user.accessToken = accessToken;
      User.set(user);
      User.store(user);
      User.setPrivacy();
      return $location.path("/");
    },
    onOutOfDate: function() {
      User.remove();
      $scope.user = {};
      $scope.isLogin = false;
      return User.login();
    },
    logout: function() {
      $scope.user = {};
      $cookieStore.remove("mUID");
      $cookieStore.remove("mAccessToken");
      $scope.isLogin = false;
      return $timeout(User.login, 200);
    },
    login: function() {
      if (!$location.path().match(/login/)) {
        return $location.path("login");
      }
    }
  };
  User.init();

  /*
  页面切换，页面操作
   */
  elMwrap = DOC["getElementById"]("m-wrap");
  Page = {
    init: function() {
      $scope.page = "home";
      $scope.scrollBody1Px = Page.scrollBody1Px;
      $scope.backToTop = Page.onBackToTop;
      $scope.$on("pageChange", Page.onPageChangeCb);
      $scope.logout = User.logout;
      $scope.Page = Page;
      return $scope.$on("onScrollTop", function(e, msg) {
        return Page.onBackToTop();
      });
    },
    onPageChangeCb: function(event, msg) {
      $scope.page = msg;
      elMwrap["scrollTop"] = 1;
      return Pagination.clear();
    },
    onBackToTop: function(isM) {
      return (isM ? elMwrap : BODY)["scrollTop"] = 0;
    },
    scrollBody1Px: function() {
      if (elMwrap["scrollTop"] === 0) {
        return elMwrap["scrollTop"] = 1;
      }
    }
  };
  Page.init();

  /*
  移动用户侧边栏菜单
   */
  MMenu = {
    init: function() {
      $scope.isMMenuOpen = false;
      $scope.toggleMMenu = MMenu.toggle;
      return $scope.MMenu = MMenu;
    },
    toggle: function() {
      return $scope.isMMenuOpen = !$scope.isMMenuOpen;
    }
  };
  MMenu.init();

  /*
  移动全屏输入框
   */
  MDesign = {
    init: function() {
      $scope.isMDesignOpen = false;
      $scope.isMDesignOpenMask = false;
      $scope.toggleMDesign = MDesign.toggle;
      return $scope.$on("onMDesignSend", MDesign.onSend);
    },
    toggle: function(type) {
      if ($scope.isMDesignOpen) {
        $scope.isMDesignOpenMask = !$scope.isMDesignOpenMask;
        $timeout(function() {
          return $scope.isMDesignOpen = !$scope.isMDesignOpen;
        }, 200);
      } else {
        $scope.isMDesignOpen = !$scope.isMDesignOpen;
        $timeout(function() {
          return $scope.isMDesignOpenMask = !$scope.isMDesignOpenMask;
        }, 200);
      }
      if ($scope.isMBillOpen) {
        MBill.toggle();
      }
      if (type && $scope.isMDesignOpen) {
        $scope.$broadcast("setMDesignType", type);
      }
      if (!$scope.isMDesignOpen) {
        return $scope.$broadcast("cancelMDesingSending");
      }
    },
    onSend: function(event, msg) {
      var content, type;
      type = msg.type;
      content = msg.content;
      switch (type) {
        case "ask":
          return Ask.ask(content);
      }
    },
    onOpen: function() {},
    onClose: function() {}
  };
  MDesign.init();

  /*
  移动底部弹出交互菜单
   */
  MBill = {
    init: function() {
      $scope.isMBillOpen = false;
      $scope.isMBillOpenMask = false;
      return $scope.toggleMBill = MBill.toggle;
    },
    toggle: function(billList) {
      if ($scope.isMBillOpen) {
        $scope.isMBillOpenMask = !$scope.isMBillOpenMask;
        return $timeout(function() {
          return $scope.isMBillOpen = !$scope.isMBillOpen;
        }, 200);
      } else {
        $scope.$broadcast("setBillList", billList);
        $scope.isMBillOpen = !$scope.isMBillOpen;
        return $timeout(function() {
          return $scope.isMBillOpenMask = !$scope.isMBillOpenMask;
        }, 100);
      }
    }
  };
  MBill.init();

  /*
  提问
   */
  Ask = {
    init: function() {
      return $scope.askQues = Ask.ask;
    },
    ask: function(data) {
      var query, url;
      url = "" + API.ask + $scope.privacyParamDir;
      if (IsDebug) {
        url = API.ask;
      }
      query = {
        content: data.content
      };
      if (data.foruser) {
        query.foruser = data.foruser;
      }
      return (IsDebug ? $http.get : $http.post)(url, query).success(Ask.askCb);
    },
    askCb: function(data) {
      var ret;
      ret = data["ret"];
      if (String(ret) === "100000") {
        $scope.$broadcast("onAskQuesSuccess", {
          queId: data["result"]
        });
        return $scope.$broadcast("onMDesignSendSuccess");
      } else {
        return $scope.$broadcast("onAskQuesFail", {
          msg: data.msg
        });
      }
    }
  };
  Ask.init();

  /*
  缓存的配置
   */
  Cache = {
    init: function() {
      var $httpDefaultCache, lruCache;
      $httpDefaultCache = $cacheFactory.get($http);
      return lruCache = $cacheFactory("lruCache", {
        capacity: 8
      });
    }
  };
  Cache.init();
  Notification = {
    init: function() {
      if ($scope.isLogin) {
        return Notification.get();
      }
    },
    time: 0,
    get: function() {
      var api;
      api = IsDebug ? API.notice : "" + API.notice + $scope.privacyParamDir;
      $http.get(api).success(Notification.cb);
      return Notification.time++;
    },
    cb: function(data) {
      if (data.msg === "ok") {
        $scope.msgCount = data.result || 0;
      }
      return $timeout(Notification.get, 30000);
    }
  };
  Notification.init();
  Toast = {
    init: function() {
      $scope.toast = Toast.toast;
      return $scope.Toast = Toast;
    },
    text: "",
    isShow: false,
    type: "primary",
    toast: function(msg, type, time) {
      if (time == null) {
        time = 3000;
      }
      Toast.text = msg;
      Toast.isShow = true;
      Toast.type = type || "success";
      return $timeout((function() {
        return Toast.isShow = false;
      }), time);
    }
  };
  Toast.init();
  Follow = {
    init: function() {
      $scope.$on("follow", function(event, data) {
        return Follow.follow(data.userid);
      });
      return $scope.$on("unfollow", function(event, data) {
        return Follow.unfollow(data.userid);
      });
    },
    send: function(api, cb) {
      return (IsDebug ? $http.get : $http.post)(api).success(cb);
    },
    follow: function(uid) {
      var api;
      api = "" + API.follow + $scope.privacyParamDir + "/userid_follow/" + uid;
      if (IsDebug) {
        api = API.follow;
      }
      return Follow.send(api, Follow.followCb);
    },
    followCb: function(data) {
      return $scope.$broadcast("followCb", data);
    },
    unfollow: function(uid) {
      var api;
      api = "" + API.unfollow + $scope.privacyParamDir + "/userid_follow/" + uid;
      if (IsDebug) {
        api = API.unfollow;
      }
      return Follow.send(api, Follow.unfollowCb);
    },
    unfollowCb: function(data) {
      return $scope.$broadcast("unfollowCb", data);
    }
  };
  Follow.init();
  LoveAns = {
    init: function() {
      $scope.loveAns = LoveAns.send;
      return $scope.$on("loveans", function(event, data) {
        return LoveAns.send(data);
      });
    },
    feed: null,
    send: function(data) {
      var api, query;
      api = "" + API.loveanswer + $scope.privacyParamDir;
      if (IsDebug) {
        api = API.loveanswer;
      }
      query = data;
      return (IsDebug ? $http.get : $http.post)(api, query).success(LoveAns.sendCb);
    },
    sendCb: function(data) {
      return $scope.$broadcast("loveansCb", data);
    }
  };
  LoveAns.init();
  Ans = {
    init: function() {
      $scope.Ans = Ans.send;
      return $scope.$on("ans", function(event, data) {
        return Ans.send(data);
      });
    },
    send: function(data) {
      var api, query;
      api = "" + API.answer + $scope.privacyParamDir;
      if (IsDebug) {
        api = API.answer;
      }
      query = {
        askid: data.askid,
        content: data.content
      };
      return (IsDebug ? $http.get : $http.post)(api, query).success(function(data) {
        return Ans.sendCb(data);
      });
    },
    sendCb: function(data) {
      return $scope.$broadcast("ansCb", data);
    }
  };
  Ans.init();
  getUserInfo = {
    init: function() {
      return $scope.$on("getUserInfo", function(e, data) {
        return getUserInfo.get(data);
      });
    },
    get: function(data) {
      var api, uid;
      uid = data.uid;
      api = ["" + API.userInfo, (IsDebug ? "" : "/" + uid), "" + $scope.privacyParam, "&uid=" + uid].join("");
      return $http.get(api).success(getUserInfo.getCb);
    },
    getCb: function(data) {
      var msg, result;
      msg = data.msg, result = data.result;
      return $scope.$broadcast("getUserInfoCb", data);
    }
  };
  getUserInfo.init();
  Comment = {
    init: function() {
      $scope.$on("comment", function(e, data) {
        return Comment.send(data);
      });
      return $scope.$on("getcomment", function(e, data) {
        return Comment.get(data);
      });
    },
    send: function(data) {
      var api;
      api = "" + API.comment + $scope.privacyParamDir;
      if (IsDebug) {
        api = API.comment;
      }
      return (IsDebug ? $http.get : $http.post)(api, data).success(function(data) {
        return Comment.sendCb(data);
      });
    },
    sendCb: function(data) {
      return $scope.$broadcast("commentCb", data);
    },
    get: function(data) {
      var api;
      api = "" + API.getComment + $scope.privacyParamDir + "/answerid/" + data.answerid;
      if (IsDebug) {
        api = API.getComment;
      }
      return $http.get(api).success(function(data) {
        return Comment.getCb(data);
      });
    },
    getCb: function(data) {
      return $scope.$broadcast("getcommentCb", data);
    }
  };
  Comment.init();
  Pagination = {
    init: function() {
      $scope.page = {};
      $scope.isPageLoading = false;
      $scope.$on("onPaginationStartChange", Pagination.onChange);
      $scope.$on("onPaginationGeted", Pagination.set);
      return $scope.$on("onClearPaginationData", Pagination.clear);
    },
    onChange: function(event, msg) {
      $scope.curPage = msg;
      return $scope.isPageLoading = true;
    },
    curPage: 1,
    totalPage: 0,
    set: function(e, pageData) {
      var curPage, totalPage, _i, _results;
      curPage = Number(pageData['cur_page']);
      totalPage = Number(pageData['total_page']);
      Pagination.curPage = curPage;
      Pagination.totalPage = totalPage;
      $scope.isPageLoading = false;
      $scope.curPage = curPage;
      $scope.totalPage = totalPage;
      $scope.pages = (function() {
        _results = [];
        for (var _i = 1; 1 <= totalPage ? _i <= totalPage : _i >= totalPage; 1 <= totalPage ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      return Page.onBackToTop();
    },
    clear: function() {
      $scope.isPageLoading = false;
      $scope.curPage = 1;
      $scope.totalPage = 0;
      return $scope.pages = [];
    }
  };
  Pagination.init();
  Ques = {
    init: function() {
      $scope.$on("onGetAskInfo", function(e, askid) {
        return Ques.getInfo(askid);
      });
      return $scope.$on("onGetAskAnswers", function(e, askid) {
        return Ques.getAnswers(askid);
      });
    },
    getInfo: function(askid) {
      var api;
      api = "" + API.askinfo + $scope.privacyParamDir + "?askid=" + askid;
      if (IsDebug) {
        api = API.askinfo;
      }
      return $http.get(api).success(Ques.getInfoCb);
    },
    getInfoCb: function(data) {
      return $scope.$broadcast("onGetAskInfoCb", data);
    },
    getAnswers: function(data) {
      var api, askid, page;
      askid = data.askid, page = data.page;
      api = "" + API.askanswers + $scope.privacyParamDir + "/page/" + page + "?type=askanswer&askid=" + askid;
      if (IsDebug) {
        api = API.askanswers;
      }
      return $http.get(api).success(Ques.getAnswersCb);
    },
    getAnswersCb: function(data) {
      return $scope.$broadcast("onGetAskAnswersCb", data);
    }
  };
  Ques.init();
  Reg = {
    init: function() {
      $scope.$on("onReg", Reg.onReg);
      return $scope.$on("onRegSuccess", Reg.onReged);
    },
    onReg: function(event, data) {
      return Reg.reg(data);
    },
    reg: function(data) {
      var email, invitecode, password, username;
      email = data.email, password = data.password, username = data.username, invitecode = data.invitecode;
      return $http({
        method: IsDebug ? "GET" : "POST",
        url: API.reg,
        data: {
          user_email: email,
          user_password: password,
          user_repwd: password,
          user_name: username,
          invitecode: invitecode
        }
      }).success(Reg.regCb);
    },
    regCb: function(data) {
      return $scope.$broadcast("onRegCb", data);
    },
    onReged: function(event, result) {
      var accessToken, user;
      $scope.isLogin = true;
      accessToken = $scope.accessToken = result["accesstoken"];
      user = result["user"];
      $scope.username = user["username"];
      $scope.UID = user["userid"];
      $scope.user.accessToken = accessToken;
      User.set(user);
      User.store(user);
      User.setPrivacy();
      return $timeout(function() {
        return $location.path("/");
      }, 1000);
    }
  };
  Reg.init();
  Friend = {
    init: function() {
      $scope.$on("onGetUserFollows", function(e, data) {
        return Friend.getFollow(data);
      });
      return $scope.$on("onGetUserFans", function(e, data) {
        return Friend.getFans(data);
      });
    },
    getFollow: function(data) {
      var api, page, uid;
      page = data.page, uid = data.uid;
      api = "" + API.friendFollow + $scope.privacyParamDir + "/page/" + page + "?uid=" + uid;
      if (IsDebug) {
        api = API.friendFollow;
      }
      return $http.get(api).success(Friend.getFollowCb);
    },
    getFollowCb: function(data) {
      return $scope.$broadcast("onGetUserFollowsCb", data);
    },
    getFans: function(data) {
      var api, page, uid;
      page = data.page, uid = data.uid;
      api = "" + API.friendFans + $scope.privacyParamDir + "/page/" + page + "?uid=" + uid;
      if (IsDebug) {
        api = API.friendFans;
      }
      return $http.get(api).success(Friend.getFansCb);
    },
    getFansCb: function(data) {
      return $scope.$broadcast("onGetUserFansCb", data);
    }
  };
  return Friend.init();
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("squareCtrl", function($scope, $http, $random) {
  var MAX_SQUARE_PAGE, setFollowBtn, square;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "square");
  });
  MAX_SQUARE_PAGE = 20;
  setFollowBtn = function(iffollow) {
    var followBtn;
    iffollow = iffollow || 0;
    followBtn = {};
    switch (iffollow - 0) {
      case 0:
        followBtn = {
          txt: "",
          cls: "success"
        };
        break;
      case 1:
        followBtn = {
          txt: "取消",
          cls: "warning"
        };
        break;
      case 2:
        followBtn = {
          txt: "互相",
          cls: "warning"
        };
    }
    followBtn.txt += "关注";
    return followBtn;
  };
  square = {
    init: function() {
      square.getNews(1);
      square.getUsers(1);
      $scope.$emit("onClearPaginationData");
      $scope.refreshFeed = square.refreshFeed;
      return $scope.refreshUsers = square.refreshUsers;
    },
    totalPage: 0,
    getNews: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.squareask + $scope.privacyParamDir + "/page/" + page + "?type=latest";
      if (IsDebug) {
        api = API.squareask;
      }
      return $http.get(api).success(square.getNewsCb);
    },
    getNewsCb: function(data) {
      var dataLists, everyoneAskLists, msg, result, ret, _i, _ref, _results;
      ret = data.ret, msg = data.msg, result = data.result;
      if (msg === "ok") {
        $scope.dataLists = dataLists = result['list'] || [];
        square.totalPage = result["page"]["total_page"];
        $scope.everyoneAskLists = everyoneAskLists = [
          dataLists[$random["in"]((function() {
            _results = [];
            for (var _i = 0, _ref = dataLists.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this))]
        ];
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.dataLoaded = true;
    },
    refreshFeed: function() {
      var max, page, _i, _results;
      max = square.totalPage > MAX_SQUARE_PAGE ? MAX_SQUARE_PAGE : square.totalPage;
      page = $random["in"]((function() {
        _results = [];
        for (var _i = 1; 1 <= max ? _i <= max : _i >= max; 1 <= max ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
      $scope.dataLoaded = false;
      return square.getNews(page);
    },
    getUsers: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.squareusers + $scope.privacyParamDir + "/page/" + page + "?type=latest";
      if (IsDebug) {
        api = API.squareusers;
      }
      return $http.get(api).success(square.getUsersCb);
    },
    getUsersCb: function(data) {
      var msg, result, ret, userLists;
      ret = data.ret, msg = data.msg, result = data.result;
      if (msg === "ok") {
        $scope.userLists = userLists = result["list"] || [];
        square.totalUserPage = result["page"]["total_page"];
      } else {
        $scope.errorMsg = msg;
      }
      return $scope.userDataLoaded = true;
    },
    refreshUsers: function() {
      var max, page, _i, _results;
      max = square.totalUserPage > MAX_SQUARE_PAGE ? MAX_SQUARE_PAGE : square.totalUserPage;
      page = $random["in"]((function() {
        _results = [];
        for (var _i = 1; 1 <= max ? _i <= max : _i >= max; 1 <= max ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
      $scope.userDataLoaded = false;
      return square.getUsers(page);
    }
  };
  return square.init();
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("userCtrl", function($scope, $timeout, $http, $routeParams, $location) {
  var follow, legalFeedTypes, user, userid;
  userid = $routeParams.id;
  $scope.myself = $scope.UID === userid;
  $scope.$on("$viewContentLoaded", function() {
    return $scope.$emit("pageChange", "user");
  });
  legalFeedTypes = ["ask", "answer", "love"];
  $scope.feedType = "ask";
  $scope.ta = "TA";
  $scope.loadingMore = function() {
    return $scope.isLoading = true;
  };
  $scope.switchFeed = function(type) {
    type = type || "ask";
    if (type === user.curType) {
      return false;
    }
    $scope.feedType = type;
    $scope.isLoading = false;
    $scope.dataLoaded = false;
    $scope.$emit("onClearPaginationData");
    user.curType = type;
    switch (type) {
      case "answer":
        user.getMyAnswer();
        return $scope.getPage = user.getMyAnswer;
      case "love":
        user.getMyLove();
        return $scope.getPage = user.getMyLove;
      default:
        user.getMyAsk();
        return $scope.getPage = user.getMyAsk;
    }
  };
  $scope.profile = null;
  user = {
    init: function() {
      $scope.myAskMsg = $scope.myAnswerMsg = $scope.myLoveMsg = "";
      $scope.myAsk = $scope.myAnswer = $scope.myLove = [];
      $scope.myAskMore = $scope.myAnswerMore = $scope.myLoveMore = false;
      $scope.$on("getUserInfoCb", function(event, data) {
        return user.getUserInfoCb(data);
      });
      $timeout(user.getUserInfo, 100);
      return $scope.switchFeed("");
    },
    getMyAsk: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.friendAsk + $scope.privacyParamDir + "/page/" + page + "?uid=" + userid;
      if (IsDebug) {
        api = API.friendAsk;
      }
      $http.get(api).success(user.getMyAskCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getMyAskCb: function(data) {
      var msg, result, ret;
      $scope.dataLoaded = true;
      ret = data.ret, msg = data.msg, result = data.result;
      if (String(data.msg) === "ok") {
        $scope.myAsk = (result != null ? result['list'] : void 0) || [];
        return $scope.$emit("onPaginationGeted", result['page']);
      } else {
        return $scope.errorMsg = msg;
      }
    },
    getMyAnswer: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.friendAns + $scope.privacyParamDir + "/page/" + page + "?uid=" + userid;
      if (IsDebug) {
        api = API.friendAns;
      }
      $http.get(api).success(user.getMyAnswerCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getMyAnswerCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      $scope.dataLoaded = true;
      if (String(data.msg) === "ok") {
        $scope.myAnswer = (result != null ? result['list'] : void 0) || [];
        return $scope.$emit("onPaginationGeted", result['page']);
      } else {
        return $scope.errorMsg = msg;
      }
    },
    getMyLove: function(page) {
      var api;
      if (page == null) {
        page = 1;
      }
      api = "" + API.frinedLove + $scope.privacyParamDir + "/page/" + page + "?uid=" + userid;
      if (IsDebug) {
        api = API.frinedLove;
      }
      $http.get(api).success(user.getMyLoveCb);
      return $scope.$emit("onPaginationStartChange", page);
    },
    getMyLoveCb: function(data) {
      var msg, result, ret;
      ret = data.ret, msg = data.msg, result = data.result;
      $scope.dataLoaded = true;
      if (String(data.msg) === "ok") {
        $scope.myLove = (result != null ? result['list'] : void 0) || [];
        return $scope.$emit("onPaginationGeted", result['page']);
      } else {
        return $scope.errorMsg = msg;
      }
    },
    getUserInfo: function() {
      return $scope.$emit("getUserInfo", {
        uid: userid
      });
    },
    getUserInfoCb: function(data) {
      var msg, result, ret;
      msg = data.msg, ret = data.ret, result = data.result;
      if (String(ret) === "100000") {
        $scope.profile = result;
        $scope.iffollow = result.iffollow;
        follow.setFollowBtn(result.iffollow);
        if (!$scope.myself) {
          switch ("" + result.sex) {
            case "1":
              return $scope.ta = "他";
            case "2":
              return $scope.ta = "她";
          }
        } else {
          return $scope.ta = "我";
        }
      }
    }
  };
  user.init();
  $scope.askHim = function() {
    return $scope.showAskBox = !$scope.showAskBox;
  };
  $scope.isFollowSending = false;
  follow = {
    init: function() {
      $scope.follow = follow.follow;
      $scope.unfollow = follow.unfollow;
      $scope.$on("followCb", function(event, data) {
        return follow.onFollowCb(data);
      });
      $scope.$on("unfollowCb", function(event, data) {
        return follow.onUnfollowCb(data);
      });
      return $scope.followFn = function() {
        switch (Number($scope.iffollow)) {
          case 0:
            return follow.follow();
          case 1:
            return follow.unfollow();
          case 2:
            return follow.unfollow();
        }
      };
    },
    follow: function() {
      $scope.isFollowSending = true;
      return $scope.$emit("follow", {
        userid: userid
      });
    },
    unfollow: function() {
      $scope.isFollowSending = true;
      return $scope.$emit("unfollow", {
        userid: userid
      });
    },
    onFollowCb: function(data) {
      var msg, result, ret, toastType;
      msg = data.msg, ret = data.ret, result = data.result;
      toastType = "";
      if (msg === "ok") {
        msg = "关注成功!";
      }
      if (String(ret) === "100000") {
        $scope.iffollow = result;
        follow.setFollowBtn(result);
        $scope.profile.count_followed = $scope.profile.count_followed - 0 + 1;
        $scope.user.count_follow = $scope.user.count_follow - 0 + 1;
      } else {
        toastType = "warn";
      }
      $scope.toast(msg, toastType);
      return $scope.isFollowSending = false;
    },
    onUnfollowCb: function(data) {
      var msg, result, ret, toastType;
      msg = data.msg, ret = data.ret, result = data.result;
      toastType = "";
      if (msg === "ok") {
        msg = "取消关注成功!";
      }
      if (String(ret) === "100000") {
        $scope.iffollow = result;
        follow.setFollowBtn(result);
        $scope.profile.count_followed -= 1;
        $scope.user.count_follow -= 1;
      } else {
        toastType = "warn";
      }
      $scope.toast(msg, toastType);
      return $scope.isFollowSending = false;
    },
    setFollowBtn: function(iffollow) {
      var followBtn;
      iffollow = iffollow || 0;
      followBtn = {};
      switch (Number(iffollow)) {
        case 0:
          followBtn = {
            txt: "",
            cls: "success"
          };
          break;
        case 1:
          followBtn = {
            txt: "取消",
            cls: "warning"
          };
          break;
        case 2:
          followBtn = {
            txt: "互相",
            cls: "warning"
          };
      }
      followBtn.txt += "关注";
      return $scope.followBtn = followBtn;
    }
  };
  return follow.init();
});

// Generated by CoffeeScript 1.7.1
Mifan.controller("userAskCtrl", function($scope, $timeout, $http, $debug, $routeParams) {
  var userid;
  $scope.quesContent = "";
  userid = $routeParams.id;
  $scope.send = function() {
    $scope.isSending = true;
    return $scope.askQues({
      content: $scope.quesContent,
      foruser: userid
    });
  };
  $scope.$on("onAskQuesSuccess", function(event, msg) {
    $scope.quesContent = "";
    $scope.isSending = false;
    $scope.isSendSucs = true;
    $timeout(function() {
      return $scope.isSendSucs = $scope.showAskBox = false;
    }, 1000);
    return $scope.toast("提问成功！");
  });
  return $scope.$on("onAskQuesFail", function(event, msg) {
    $scope.toast(msg.msg);
    $scope.isSending = false;
    return $timeout(function() {
      return $scope.isSendSucs = false;
    }, 1000);
  });
});

// Generated by CoffeeScript 1.7.1
"use strict";
Mifan.controller("welcomeCtrl", [
  "$scope", function($scope) {
    $scope.$on("$viewContentLoaded", function() {
      return $scope.$emit("pageChange", "welcome");
    });
    $scope.$watch("email + password", function() {
      return $scope.isLoginValid = $scope.email && $scope.password;
    });
    $scope.isLoginBox = false;
    $scope.isLoging = false;
    $scope.isReging = false;
    $scope.toggleLogin = function() {
      return $scope.isLoginBox = !$scope.isLoginBox;
    };
    $scope.loginSubmit = function() {
      return $scope.isLoging = true;
    };
    $scope.regSubmit = function() {
      return $scope.isReging = true;
    };
    return false;
  }
]);
